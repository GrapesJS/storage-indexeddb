{"version":3,"file":"index.js","mappings":";CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAQ,sBAAwBD,IAEhCD,EAAK,sBAAwBC,IAR/B,CASyB,oBAAfK,WAA6BA,WAAgC,oBAAXC,OAAyBA,OAASC,MAAO,I,mBCRrG,IAAIC,EAAsB,CCA1BA,EAAwB,CAACP,EAASQ,KACjC,IAAI,IAAIC,KAAOD,EACXD,EAAoBG,EAAEF,EAAYC,KAASF,EAAoBG,EAAEV,EAASS,IAC5EE,OAAOC,eAAeZ,EAASS,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3EF,EAAwB,CAACQ,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFT,EAAyBP,IACH,oBAAXoB,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeZ,EAASoB,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeZ,EAAS,aAAc,CAAEsB,OAAO,M,qqDC8HvD,QA7F+C,SAACC,EAAQC,QAAA,IAAAA,IAAAA,EAAA,IACtD,IAaIC,EAbEC,EAAc,GAClBjB,IAAK,aACLkB,OAAQ,MACRC,gBAAiB,YACdJ,EAAKK,SAGJA,EAAO,KACXC,KAAM,aACHN,GAAI,CACPK,QAASH,IAILK,EAAKR,EAAOS,QACZC,EAAcJ,EAAQC,KAC5BC,EAAGG,YAAYL,QAASI,GAAeP,EAKvC,IAAMS,EAAa,SAACX,GAAyB,WAAIY,SAAqB,SAACC,EAASC,GAC9E,GAAIb,EACFY,EAAQZ,OACH,CACL,IAAM,EAAUpB,OAAOkC,UAAUC,KAAKhB,EAAKG,OAAS,GACpD,EAAQc,QAAUH,EAClB,EAAQI,UAAY,YAClBjB,EAAK,EAAQkB,QACVF,QAAUH,EACbD,EAAQZ,IAEV,EAAQmB,gBAAkB,SAAAC,GACxB,EAAQF,OAAOG,kBAAkBtB,EAAKI,uBAQtCmB,EAAiB,SAACC,GACtB,OAAOvB,EAAGwB,YAAY,CAACD,GAAY,aAAaE,YAAYF,IAGxDG,EAAsB,SAAO3B,GAAoB,0C,+DAC/C4B,EAAO5B,EAAKI,gBACdH,EACK,CAAP,EAAOsB,EAAeK,IADpB,M,OAGF,SAAMjB,EAAWX,I,OACjB,OADA,SACO,CAAP,EAAOuB,EAAeK,YAOpBC,EAAU,SAACC,EAAsB9B,GACrC,OAAO,IAAIY,SAAqB,SAACC,EAASC,GACxC,IAAMiB,EAAUD,EAAKxC,IAAIU,EAAKf,KAC9B8C,EAAQd,QAAUH,EAClBiB,EAAQb,UAAY,WAClBL,EAAQkB,EAAQZ,QAAU,SAQ1Ba,EAAU,SAACF,EAAsBG,EAAmBjC,GACxD,OAAO,IAAIY,SAAqB,SAACC,EAASC,GACxC,IAAMiB,EAAUD,EAAKI,IAAID,EAAMjC,EAAKf,KACpC8C,EAAQd,QAAUH,EAClBiB,EAAQb,UAAY,WAAM,OAAAL,EAAQoB,QAItC1B,EAAG4B,IAAoB1B,EAAa,CAC5B2B,KAAI,SAACpC,G,gGACI,SAAM2B,EAAoB3B,I,OAChC,OADD8B,EAAO,SACN,GAAMD,EAAQC,EAAM9B,I,OAA3B,MAAO,CAAP,EAAO,kBAGHqC,MAAK,SAACJ,EAAMjC,G,gGACH,SAAM2B,EAAoB3B,I,OAChC,OADD8B,EAAO,SACN,GAAME,EAAQF,EAAMG,EAAMjC,I,OAAjC,MAAO,CAAP,EAAO,qB","sources":["webpack://grapesjs-indexeddb/webpack/universalModuleDefinition","webpack://grapesjs-indexeddb/webpack/bootstrap","webpack://grapesjs-indexeddb/webpack/runtime/define property getters","webpack://grapesjs-indexeddb/webpack/runtime/hasOwnProperty shorthand","webpack://grapesjs-indexeddb/webpack/runtime/make namespace object","webpack://grapesjs-indexeddb/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"grapesjs-indexeddb\"] = factory();\n\telse\n\t\troot[\"grapesjs-indexeddb\"] = factory();\n})(typeof globalThis !== 'undefined' ? globalThis : (typeof window !== 'undefined' ? window : this), () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import type grapesjs from 'grapesjs';\n\nexport type StorageOptions = {\n  /**\n   * Local project key\n   * @default 'gjsProject'\n   */\n  key?: string,\n\n  /**\n   * Database name\n   * @default 'gjs'\n   */\n  dbName?: string,\n\n  /**\n   * Collection name\n   * @default 'projects'\n   */\n  objectStoreName?: string,\n};\n\nexport type PluginOptions = {\n  /**\n   * Type id used to register the new storage.\n   * You can use this option in case you want to replace the already available storages (eg. `local`).\n   * @default 'indexeddb'\n   */\n  type?: string,\n\n  /**\n   * Default storage options\n   */\n  options?: StorageOptions,\n};\n\ntype ProjectData = grapesjs.ProjectData;\n\nconst plugin: grapesjs.Plugin<PluginOptions> = (editor, opts = {}) => {\n  const storageOptions: StorageOptions = {\n    key: 'gjsProject',\n    dbName: 'gjs',\n    objectStoreName: 'projects',\n    ...opts.options,\n  };\n\n  const options: PluginOptions = {\n    type: 'indexeddb',\n    ...opts,\n    options: storageOptions,\n  };\n\n  let db: IDBDatabase;\n  const sm = editor.Storage;\n  const storageName = options.type!;\n  sm.getConfig().options![storageName] = storageOptions;\n\n  /**\n   * Get the IDBDatabase instance\n   */\n  const getAsyncDb = (opts: StorageOptions) => new Promise<IDBDatabase>((resolve, reject) => {\n    if (db) {\n      resolve(db);\n    } else {\n      const request = window.indexedDB.open(opts.dbName!, 1);\n      request.onerror = reject;\n      request.onsuccess = () => {\n        db = request.result;\n        db.onerror = reject;\n        resolve(db);\n      };\n      request.onupgradeneeded = e => {\n        request.result.createObjectStore(opts.objectStoreName!);\n      };\n    }\n  });\n\n  /**\n   * Get the IDBObjectStore instance\n   */\n  const getObjectStore = (storeName: string): IDBObjectStore => {\n    return db.transaction([storeName], 'readwrite').objectStore(storeName);\n  };\n\n  const getAsyncObjectStore = async (opts: StorageOptions) => {\n    const name = opts.objectStoreName!;\n    if (db) {\n      return getObjectStore(name);\n    } else {\n      await getAsyncDb(opts);\n      return getObjectStore(name);\n    }\n  };\n\n  /**\n   * Load the ProjectData\n   */\n  const getData = (objs: IDBObjectStore, opts: StorageOptions) => {\n    return new Promise<ProjectData>((resolve, reject) => {\n      const request = objs.get(opts.key!);\n      request.onerror = reject;\n      request.onsuccess = () => {\n        resolve(request.result || {});\n      };\n    });\n  }\n\n  /**\n   * Store the ProjectData\n   */\n  const putData = (objs: IDBObjectStore, data: ProjectData, opts: StorageOptions) => {\n    return new Promise<ProjectData>((resolve, reject) => {\n      const request = objs.put(data, opts.key!);\n      request.onerror = reject;\n      request.onsuccess = () => resolve(data);\n    });\n  }\n\n  sm.add<StorageOptions>(storageName, {\n    async load(opts) {\n      const objs = await getAsyncObjectStore(opts);\n      return await getData(objs, opts);\n    },\n\n    async store(data, opts) {\n      const objs = await getAsyncObjectStore(opts);\n      return await putData(objs, data, opts);\n    },\n  });\n};\n\nexport default plugin;\n"],"names":["root","factory","exports","module","define","amd","globalThis","window","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","editor","opts","db","storageOptions","dbName","objectStoreName","options","type","sm","Storage","storageName","getConfig","getAsyncDb","Promise","resolve","reject","indexedDB","open","onerror","onsuccess","result","onupgradeneeded","e","createObjectStore","getObjectStore","storeName","transaction","objectStore","getAsyncObjectStore","name","getData","objs","request","putData","data","put","add","load","store"],"sourceRoot":""}